import tkinter as tk
from tkinter import messagebox
import pyautogui
import pytesseract
import cohere
import time

# Set Tesseract OCR path
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

# Set your Cohere API key
cohere_api_key = "yourapikey"
co = cohere.Client(api_key=cohere_api_key)

# Function to select a region of the screen (user drag)
def select_region():
    x1, y1 = pyautogui.position()  # Starting point (click)
    pyautogui.mouseDown()  # Simulate the mouse down
    
    time.sleep(3)  # Adjust time for the user to drag the mouse
    x2, y2 = pyautogui.position()  # Ending point (release)
    pyautogui.mouseUp()  # Simulate the mouse up

    # Ensure the selected region coordinates are positive
    width = abs(x2 - x1)
    height = abs(y2 - y1)
    x1, y1 = min(x1, x2), min(y1, y2)
    
    # Capture the screenshot of the selected region
    region = pyautogui.screenshot(region=(x1, y1, width, height))
    return region

# Function to extract text from the selected region
def extract_text(image):
    try:
        return pytesseract.image_to_string(image)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to extract text: {str(e)}")
        return ""

# Function to interact with Cohere API
def get_ai_response(prompt):
    try:
        response = co.generate(
            model='command-xlarge-nightly',  # Use an available model
            prompt=prompt,
            max_tokens=150,
            temperature=0.4
        )
        
        # Print the raw response for debugging
        print("Raw API Response:", response)

        # Extract and return the generated text
        if response and response.generations:
            return response.generations[0].text
        else:
            return "No response generated by Cohere."
    except Exception as e:
        # Print the error in the terminal
        print(f"Error: {str(e)}")
        return f"Error: {str(e)}"

# Function to handle the workflow
def process_selection():
    try:
        region = select_region()
        if region:
            text = extract_text(region)
            if not text.strip():
                messagebox.showwarning("No Text", "No text was found in the selected region.")
                return

            response = get_ai_response(text)
            messagebox.showinfo("AI Response", response)
        else:
            messagebox.showwarning("Region Selection", "No region selected. Please try again.")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Main GUI
def main():
    root = tk.Tk()
    root.title("AI Screen Assistant")
    root.geometry("300x150")

    instruction_label = tk.Label(root, text="Click the button to select a region.")
    instruction_label.pack(pady=10)

    select_button = tk.Button(root, text="Select Region", command=process_selection)
    select_button.pack(pady=10)

    root.mainloop()

if __name__ == "__main__":
    main()
